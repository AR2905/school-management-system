generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  Entries Entry[] 
   
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
  Entries Entry[] 
  

}
model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
  Entries Entry[] 
  
}


model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique
  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  Entries Entry[] 

}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  Entries Entry[] 

}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  Entries Entry[] 

}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  Entries Entry[] 

}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]  
  Entries Entry[] 

}



model Result {
  id    Int @id @default(autoincrement())
  score Int
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
  Entries Entry[] 

}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
  Entries Entry[] 

}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}



 
enum FieldType {
  STRING
  TEXT
  INT
  BOOLEAN
  DATE
  URL
  JSON 
  SELECT
  FILE
} 





enum UserType {
  Parent
  Teacher
  Student
  Subject
  Classes
  Lesson
  Exam
  Assignment
  Event
  Announcement

} 
 model CustomField {    

       id Int @id @default(autoincrement())   
    fieldName String 
    fieldType FieldType
    isRequired   Boolean?

    Options String[]

    moduleType UserType
   csMapper CsMapper[] 
   Entries Entry[]
   isDeleted Boolean? @default(false)
 
    isTemp Boolean? @default(false)  
  } 

  
model CsMapper {
    id Int @id @default(autoincrement()) 
 
    CustomFieldId Int?  
    customField   CustomField? @relation(fields: [CustomFieldId], references: [id])  

    entryId Int @unique
    entry Entry? @relation(fields: [entryId], references: [id])
    
 
}  
 

model Entry { 

  id Int @id @default(autoincrement())   

  CustomFieldId Int? 
  customField      CustomField?      @relation(fields: [CustomFieldId], references: [id]  , onDelete: SetNull)
  
  FieldValue String?
  

  moduleType UserType

    isRequired Boolean @default(false)
  mapper CsMapper? @relation  

  
  studentId      String?       
  student        Student?      @relation(fields: [studentId], references: [id])
  parentId       String?       
  parent         Parent?       @relation(fields: [parentId], references: [id])
  teacherId      String?       
  teacher        Teacher?      @relation(fields: [teacherId], references: [id]) 


  subjectId      Int?       
  subject        Subject?      @relation(fields: [subjectId], references: [id]) 

  classesId      Int?       
  classes        Class?      @relation(fields: [classesId], references: [id]) 

   lessonId  Int?
  lesson    Lesson?  @relation(fields: [lessonId], references: [id]) 

    examId      Int?       
  exam        Exam?      @relation(fields: [examId], references: [id]) 

    assignmentId     Int?       
  assignment         Assignment?      @relation(fields: [assignmentId], references: [id]) 

    eventId      Int?       
  event        Event?      @relation(fields: [eventId], references: [id]) 

    announcementId      Int?       
  announcement        Announcement?      @relation(fields: [announcementId], references: [id]) 

  

  @@unique([CustomFieldId, teacherId])  
  @@unique([CustomFieldId, studentId])  
  @@unique([CustomFieldId, parentId])   
}